from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters
from secret import key
import os 
from datetime import datetime
async def hello(update, context):
    await update.message.reply_text(f'Hello {update.effective_user.first_name}')

async def ricerca(update, context):

    if '.jpg' in update.message.text:
        user = update.message.from_user
        chat_id = update.message.chat.id
        dir = f'chatbot/photo_recall_bot/img/{user}'
        file = update.message.text
        await context.bot.send_document(chat_id=chat_id, document=open(f'{dir}/{file}', 'rb'))

    elif 'cerca' in update.message.text:
        user = update.message.from_user
        p = update.message.text.strip().split(' ')
        if len(p) == 2:
            kw = p[1]
            trovate = []
            for photo in db[user]:
                if kw in photo['caption']:   
                    trovate.append(photo['photo'])
        if len(trovate) == 0:
            await update.message.reply_text('non ci sono foto con queste keyword')
        else:
            await update.message.reply_text('\n'.join(trovate))
    else:
        await update.message.reply_text('cerca [keyword] [data_inizio] [data_fine]')
async def photo_handler(update, context):
    user = update.message.from_user
    photo_file = await update.message.photo[-1].get_file()
    photo_caption = update.message.caption
    
    if user not in db:
        db[user] = []

    dir = f'chatbot/photo_recall_bot/img/{user}'
    file = f'{len(db[user])}.jpg'
    if not os.path.exists(dir):
        os.makedirs(dir)
    await photo_file.download_to_drive(f'{dir}/{file}')
    
    data = datetime.now()
    db[user].append({'photo':file,'caption':photo_caption,'data':data})
   
    await update.message.reply_text(f'photo received')
    #chat_id = update.message.chat.id
    #await context.bot.send_document(chat_id=chat_id, document=open('chatbot/img/user_photo.jpg', 'rb'))


db = {}

print('starting')
app = ApplicationBuilder().token(key).build()
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, ricerca))
app.add_handler(MessageHandler(filters.PHOTO, photo_handler))
app.run_polling()